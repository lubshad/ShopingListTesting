plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id "kotlin-kapt"
    id("dagger.hilt.android.plugin")
    id("androidx.navigation.safeargs")
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

android {
    compileSdk 31


    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'

    }


    defaultConfig {
        applicationId "com.example.shopinglisttesting"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.example.shopinglisttesting.MyTestRunner"
        buildConfigField("String", "PIXABAY_KEY", localProperties["pixabay_key"])
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding = true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    //Truth library
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation 'junit:junit:4.+'
    testImplementation "androidx.arch.core:core-testing:$archVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'com.google.truth:truth:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.arch.core:core-testing:$archVersion"

    // For instrumentation tests
    androidTestImplementation  "com.google.dagger:hilt-android-testing:$dagger_hilt_version"
    androidTestAnnotationProcessor "com.google.dagger:hilt-compiler:$dagger_hilt_version"
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:$dagger_hilt_version")

    // For local unit tests
    testImplementation "com.google.dagger:hilt-android-testing:$dagger_hilt_version"
    testAnnotationProcessor "com.google.dagger:hilt-compiler:$dagger_hilt_version"
    kaptTest("com.google.dagger:hilt-android-compiler:$dagger_hilt_version")



    //Navigation Components
    implementation("androidx.navigation:navigation-fragment-ktx:$nav_version")
    implementation("androidx.navigation:navigation-ui-ktx:$nav_version")


    //Fragment
    implementation("androidx.fragment:fragment-ktx:$fragment_version")

    //Retrofit and GsonConverter
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    //Dagger Hilt
    implementation("com.google.dagger:hilt-android:$dagger_hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$dagger_hilt_version")

    //Paging
    implementation("androidx.paging:paging-runtime-ktx:$paging_version")

    //Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt("com.github.bumptech.glide:compiler:$glide_version")


    //Room Database
    implementation("androidx.room:room-runtime:$roomVersion")
    implementation("androidx.room:room-ktx:$roomVersion")
    kapt("androidx.room:room-compiler:$roomVersion")

//
//    //Coroutines
//    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion")


}

kapt {
    correctErrorTypes = true
}